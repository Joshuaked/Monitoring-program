What the fuck am I doing?

import turtle


# a class that draws a Spirograph
class Spiro:
    # this constructs it
    def __init__(self, xc, yc, col, R, r, l):
        self.t = turtle.Turtle()
        self.t.shape('turtle')
        self.step = 5
        self.drawingComplete = False
        self.setparams(xc, yc, col, R, r, l)
        self.resart()


# now to set the parameters
def setparams(self, xc, yc, col, R, r, l):
    # these are the Spirograph Parameters
    self.xc = xc
    self.yc = yc
    self.R = int(R)
    self.r = int(r)
    self.l = l
    self.col = col
    # reduce r/R to its smallest form by dividing with the GCD
    gcdVal = gcd(self.r, self.R)
    self.nRot = self.r // gcdVal
    self.k = r / float(R)
    self.t.color(*col)
    self.a = 0


def draw(self):
    R, k, l = self.R, self.k, self.l
    for i in range(0, 360 * self.nRot + 1, self.step):
        a = math.radians(i)
        x = R * ((1 - k) * math.cos(a) + l * k * math.cos((1 - k) * a / k))
        y = R * ((1 - k) * math.sin(a) - l * k * math.sin((1 - k) * a / k))
        self.t.setpos(self.xc + x, self.yc + y)
        self.t.hideturtle()


# update by one step
def update(self):
    # skip the rest of the steps if done
    if self.drawingComplete:
        return
    # increment the angle
    self.a += self.step
    # draw a step
    R, k, l = self.R, self.k, self.l
    # set the angle
    a = math.radians(self.a)
    x = self.R * ((1 - k) * math.cos(a) + l * k * math.cos((1 - k) * a / k))
    y = self.R * ((1 - k) * math.sin(a) - l * k * math.sin((1 - k) * a / k))
    self.t.setpos(self.xc + x, self.yc + y)
    # if drawing is complete, set the flag
    if self.a >= 360 * self.nRot:
        self.drawingComplete = True
        # drawing is now done so hide the turtle cursor
        self.t.hideturtle()


# clear everything
def clear(self):
    self.t.clear()
